/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/blocks/info-dialog.js":
/*!**************************************!*\
  !*** ./src/js/blocks/info-dialog.js ***!
  \**************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst dialog = document.getElementById('info-dialog')\r\nconst openDialogButton = document.getElementById('info-dialog-open')\r\nconst closeDialogButton = document.getElementById('info-dialog-close')\r\n\r\nopenDialogButton.addEventListener('click', (e) => {\r\n\tdialog.showModal()\r\n\tdialog.classList.add('--opening')\r\n})\r\n\r\ncloseDialogButton.addEventListener('click', (e) => {\r\n\tdialog.classList.add('--closing')\r\n})\r\n\r\ndocument.documentElement.addEventListener('mouseup', (e) => {\r\n\tif (!dialog.hasAttribute('open')) return\r\n\r\n\tconst dialogRect = dialog.getClientRects()\r\n\tconst rightEdge = dialogRect[0].left + dialogRect[0].width\r\n\tconst bottomEdge = dialogRect[0].top + dialogRect[0].height\r\n\r\n\tif (\r\n\t\te.clientX < dialogRect[0].left ||\r\n\t\te.clientX > rightEdge ||\r\n\t\te.clientY < dialogRect[0].top ||\r\n\t\te.clientY > bottomEdge\r\n\t) {\r\n\t\tdialog.classList.add('--closing')\r\n\t}\r\n})\r\n\r\ndialog.addEventListener('animationend', (e) => {\r\n\tif (dialog.classList.contains('--opening')) {\r\n\t\tdialog.classList.remove('--opening')\r\n\t} else if (dialog.classList.contains('--closing')) {\r\n\t\tdialog.close()\r\n\t\tdialog.classList.remove('--closing')\r\n\t}\r\n})\n\n//# sourceURL=webpack://gulp-template/./src/js/blocks/info-dialog.js?");

/***/ }),

/***/ "./src/js/blocks/todoIndexedDB.js":
/*!****************************************!*\
  !*** ./src/js/blocks/todoIndexedDB.js ***!
  \****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dbClearTasks: function() { return /* binding */ dbClearTasks; },\n/* harmony export */   dbDeleteTask: function() { return /* binding */ dbDeleteTask; },\n/* harmony export */   dbGetAllTasks: function() { return /* binding */ dbGetAllTasks; },\n/* harmony export */   dbGetTaskByIndex: function() { return /* binding */ dbGetTaskByIndex; },\n/* harmony export */   dbGetTaskByKey: function() { return /* binding */ dbGetTaskByKey; },\n/* harmony export */   dbPutTasks: function() { return /* binding */ dbPutTasks; },\n/* harmony export */   dbUpdateTask: function() { return /* binding */ dbUpdateTask; }\n/* harmony export */ });\n/* harmony import */ var _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../libs/indexedDB/indexedDB.js */ \"./src/js/libs/indexedDB/indexedDB.js\");\n\r\n\r\nconst dbIndexes = [\r\n\t['taskText', ['taskText'], { unique: false }],\r\n\t['completed', ['completed'], { unique: false }],\r\n\t['deleted', ['deleted'], { unique: false }],\r\n]\r\n\r\nconst createTasksObjectStore = _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.createObjectStore.bind(undefined, 'tasks', dbIndexes, 'id', true)\r\n\r\nasync function dbGetTaskByKey(key) {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.getEntryByKey(key, 'tasks', db)\r\n\r\n\treturn response\r\n}\r\n\r\nasync function dbGetTaskByIndex(index, searchValue, all = false) {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.getEntryByIndex(index, searchValue, all, 'tasks', db)\r\n\r\n\treturn response\r\n}\r\n\r\nasync function dbGetAllTasks() {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.getAllEntries('tasks', db)\r\n\r\n\treturn response\r\n}\r\n\r\nasync function dbPutTasks(storeEntries) {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.putEntries(storeEntries, 'tasks', db)\r\n\r\n\treturn response\r\n}\r\n\r\nasync function dbUpdateTask(key, index, newValue) {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.updateEntry(key, index, newValue, 'tasks', db)\r\n\r\n\treturn response\r\n}\r\n\r\nasync function dbDeleteTask(key) {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.deleteEntry(key, 'tasks', db)\r\n\r\n\treturn response\r\n}\r\n\r\nasync function dbClearTasks() {\r\n\tconst db = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.connectDB('todo', 1, createTasksObjectStore)\r\n\tconst response = await _libs_indexedDB_indexedDB_js__WEBPACK_IMPORTED_MODULE_0__.clearObjectStore('tasks', db)\r\n\r\n\treturn response\r\n}\n\n//# sourceURL=webpack://gulp-template/./src/js/blocks/todoIndexedDB.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _blocks_todoIndexedDB_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks/todoIndexedDB.js */ \"./src/js/blocks/todoIndexedDB.js\");\n/* harmony import */ var _blocks_info_dialog_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blocks/info-dialog.js */ \"./src/js/blocks/info-dialog.js\");\n\r\n\r\nconst tasksMap = new Map()\r\nconst taskForm = document.getElementById('task-form')\r\nconst taskInput = document.getElementById('task-input')\r\n\r\nconst tasksList = document.getElementById('tasks-list')\r\nconst completedTasksList = document.getElementById('completed-tasks-list')\r\nconst deletedTasksList = document.getElementById('deleted-tasks-list')\r\n\r\ntaskForm.addEventListener('submit', (e) => {\r\n\te.preventDefault()\r\n\r\n\tconst task = createTask(taskInput.value)\r\n\r\n\ttaskForm.reset()\r\n\r\n\ttasksList.append(task)\r\n\ttask.classList.add('--expanded')\r\n\tupdateTaskTextHeight(tasksMap.get(task).taskText)\r\n})\r\n\r\nfunction createTask(text) {\r\n\tconst taskElement = document.createElement('li')\r\n\tconst taskWrapper = document.createElement('div')\r\n\tconst taskText = document.createElement('textarea')\r\n\tconst taskEditButton = document.createElement('button')\r\n\tconst taskCompleteButton = document.createElement('button')\r\n\tconst taskRecoverButton = document.createElement('button')\r\n\tconst taskDeleteButton = document.createElement('button')\r\n\r\n\ttaskElement.classList.add('tasks-list__item')\r\n\ttaskWrapper.classList.add('tasks-list__item-wrapper')\r\n\r\n\ttaskText.classList.add('tasks-list__item-text', 'interactive-element')\r\n\ttaskText.setAttribute('disabled', '')\r\n\ttaskText.innerText = text\r\n\ttaskText.style.resize = 'none'\r\n\r\n\ttaskEditButton.classList.add('tasks-list__item-button', 'tasks-list__edit-button', 'interactive-element')\r\n\ttaskCompleteButton.classList.add('tasks-list__item-button', 'tasks-list__complete-button', 'interactive-element')\r\n\ttaskRecoverButton.classList.add('tasks-list__item-button', 'tasks-list__recover-button', 'interactive-element')\r\n\ttaskDeleteButton.classList.add('tasks-list__item-button', 'tasks-list__delete-button', 'interactive-element')\r\n\r\n\ttaskEditButton.type = 'button'\r\n\ttaskCompleteButton.type = 'button'\r\n\ttaskRecoverButton.type = 'button'\r\n\ttaskDeleteButton.type = 'button'\r\n\r\n\ttaskEditButton.setAttribute('data-type', 'edit')\r\n\ttaskCompleteButton.setAttribute('data-type', 'complete')\r\n\ttaskRecoverButton.setAttribute('data-type', 'recover')\r\n\ttaskDeleteButton.setAttribute('data-type', 'delete')\r\n\r\n\ttaskEditButton.innerHTML = '<img src=\"img/icons/edit.svg\" alt=\"Редактировать\" class=\"tasks-list__item-button-img\">'\r\n\ttaskCompleteButton.innerHTML = '<img src=\"img/icons/complete.svg\" alt=\"Выполнить\" class=\"tasks-list__item-button-img\">'\r\n\ttaskRecoverButton.innerHTML = '<img src=\"img/icons/recover.svg\" alt=\"Вернуть в список задач\" class=\"tasks-list__item-button-img\">'\r\n\ttaskDeleteButton.innerHTML = '<img src=\"img/icons/cross.svg\" alt=\"Удалить\" class=\"tasks-list__item-button-img\">'\r\n\r\n\ttaskRecoverButton.style.display = 'none'\r\n\r\n\ttaskElement.append(taskWrapper)\r\n\ttaskWrapper.append(taskText, taskEditButton, taskRecoverButton, taskCompleteButton, taskDeleteButton)\r\n\r\n\ttasksMap.set(taskElement, {\r\n\t\ttaskWrapper,\r\n\t\ttaskText,\r\n\t\ttaskEditButton,\r\n\t\ttaskRecoverButton,\r\n\t\ttaskCompleteButton,\r\n\t\ttaskDeleteButton\r\n\t})\r\n\r\n\ttaskElement.addEventListener('click', taskClickHandler)\r\n\r\n\ttaskText.addEventListener('keydown', (e) => {\r\n\t\tif (!e.shiftKey && e.key === 'Enter') {\r\n\t\t\ttoggleEditState(tasksMap.get(taskElement))\r\n\t\t} else if (e.shiftKey && e.key === 'Enter') {\r\n\t\t\tupdateTaskTextHeight(e.currentTarget)\r\n\t\t}\r\n\t})\r\n\r\n\ttaskText.addEventListener('input', (e) => updateTaskTextHeight(e.currentTarget))\r\n\r\n\treturn taskElement\r\n}\r\n\r\nfunction updateTaskTextHeight(taskText) {\r\n\ttaskText.style.height = `40px`\r\n\tif (taskText.scrollHeight > taskText.offsetHeight) {\r\n\t\ttaskText.style.height = 'auto'\r\n\t\ttaskText.style.height = `${taskText.scrollHeight}px`\r\n\t}\r\n}\r\n\r\nfunction taskClickHandler(e) {\r\n\tconst taskElement = e.target.closest('li.tasks-list__item')\r\n\tconst button = e.target.closest('button')\r\n\r\n\tif (!taskElement || !button) return\r\n\r\n\tconst children = tasksMap.get(taskElement)\r\n\r\n\tswitch (button.getAttribute('data-type')) {\r\n\t\tcase 'edit':\r\n\t\t\teditTask(children)\r\n\t\t\tbreak\r\n\t\tcase 'complete':\r\n\t\t\tcompleteTask(taskElement, children)\r\n\t\t\tbreak\r\n\t\tcase 'recover':\r\n\t\t\trecoverTask(taskElement, children)\r\n\t\t\tbreak\r\n\t\tcase 'delete':\r\n\t\t\tdeleteTask(taskElement, children)\r\n\t\t\tbreak\r\n\t}\r\n}\r\n\r\nfunction editTask(children) {\r\n\ttoggleEditState(children)\r\n}\r\n\r\nfunction completeTask(task, children) {\r\n\ttask.classList.add('--wrapped')\r\n\r\n\ttask.addEventListener('animationend', (e) => {\r\n\t\tcompletedTasksList.append(task)\r\n\t\ttask.classList.remove('--wrapped')\r\n\t\ttask.classList.add('--expanded')\r\n\r\n\t\tchildren.taskEditButton.style.display = 'none'\r\n\t\tchildren.taskCompleteButton.style.display = 'none'\r\n\t\tchildren.taskRecoverButton.style.display = 'flex'\r\n\t}, { once: true, })\r\n}\r\n\r\nfunction deleteTask(task, children) {\r\n\tif (task.closest('ul').id === 'deleted-tasks-list') {\r\n\t\ttask.classList.add('--wrapped')\r\n\r\n\t\ttask.addEventListener('animationend', (e) => {\r\n\t\t\ttask.remove()\r\n\t\t}, { once: true, })\r\n\t} else {\r\n\t\ttask.classList.add('--wrapped')\r\n\r\n\t\ttask.addEventListener('animationend', (e) => {\r\n\t\t\tdeletedTasksList.append(task)\r\n\t\t\ttask.classList.remove('--wrapped')\r\n\t\t\ttask.classList.add('--expanded')\r\n\r\n\t\t\tchildren.taskEditButton.style.display = 'none'\r\n\t\t\tchildren.taskCompleteButton.style.display = 'none'\r\n\t\t\tchildren.taskRecoverButton.style.display = 'flex'\r\n\t\t}, { once: true, })\r\n\t}\r\n}\r\n\r\nfunction recoverTask(task, children) {\r\n\ttask.classList.add('--wrapped')\r\n\r\n\ttask.addEventListener('animationend', (e) => {\r\n\t\ttasksList.append(task)\r\n\t\ttask.classList.remove('--wrapped')\r\n\t\ttask.classList.add('--expanded')\r\n\r\n\t\tchildren.taskEditButton.style.display = 'flex'\r\n\t\tchildren.taskCompleteButton.style.display = 'flex'\r\n\t\tchildren.taskRecoverButton.style.display = 'none'\r\n\t}, { once: true, })\r\n}\r\n\r\nfunction toggleEditState(children) {\r\n\tconst innerImg = children.taskEditButton.querySelector('img')\r\n\r\n\tif (innerImg.alt === 'Редактировать') {\r\n\t\tinnerImg.src = 'img/icons/save.svg'\r\n\t\tinnerImg.alt = 'Сохранить'\r\n\r\n\t\tchildren.taskText.removeAttribute('disabled')\r\n\t\tchildren.taskText.style.resize = 'vertical'\r\n\r\n\t\tchildren.taskText.focus()\r\n\r\n\t\tchildren.taskText.selectionStart = children.taskText.value.length\r\n\r\n\t\tchildren.taskDeleteButton.setAttribute('disabled', '')\r\n\t\tchildren.taskCompleteButton.setAttribute('disabled', '')\r\n\t\tchildren.taskRecoverButton.setAttribute('disabled', '')\r\n\t} else if (innerImg.alt === 'Сохранить') {\r\n\t\tinnerImg.src = 'img/icons/edit.svg'\r\n\t\tinnerImg.alt = 'Редактировать'\r\n\r\n\t\tchildren.taskText.setAttribute('disabled', '')\r\n\t\tchildren.taskText.style.resize = 'none'\r\n\r\n\t\tsetTimeout(() => children.taskEditButton.focus(), 1)\r\n\r\n\t\tchildren.taskDeleteButton.removeAttribute('disabled')\r\n\t\tchildren.taskCompleteButton.removeAttribute('disabled')\r\n\t\tchildren.taskRecoverButton.removeAttribute('disabled')\r\n\t}\r\n}\r\n\r\n\n\n//# sourceURL=webpack://gulp-template/./src/js/index.js?");

/***/ }),

/***/ "./src/js/libs/indexedDB/indexedDB.js":
/*!********************************************!*\
  !*** ./src/js/libs/indexedDB/indexedDB.js ***!
  \********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearObjectStore: function() { return /* binding */ clearObjectStore; },\n/* harmony export */   connectDB: function() { return /* binding */ connectDB; },\n/* harmony export */   createObjectStore: function() { return /* binding */ createObjectStore; },\n/* harmony export */   deleteEntry: function() { return /* binding */ deleteEntry; },\n/* harmony export */   getAllEntries: function() { return /* binding */ getAllEntries; },\n/* harmony export */   getEntryByIndex: function() { return /* binding */ getEntryByIndex; },\n/* harmony export */   getEntryByKey: function() { return /* binding */ getEntryByKey; },\n/* harmony export */   putEntries: function() { return /* binding */ putEntries; },\n/* harmony export */   updateEntry: function() { return /* binding */ updateEntry; }\n/* harmony export */ });\nconst indexedDB =\r\n\twindow.indexedDB ||\r\n\twindow.mozIndexedDB ||\r\n\twindow.webkitIndexedDB ||\r\n\twindow.msIndexedDB ||\r\n\twindow.shimIndexedDB;\r\n\r\nfunction connectDB(databaseName, version, upgradeCallback = null) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst request = indexedDB.open(databaseName, version)\r\n\r\n\t\trequest.onerror = function (e) {\r\n\t\t\treject(e)\r\n\t\t}\r\n\r\n\t\trequest.onupgradeneeded = function (e) {\r\n\t\t\tconst db = e.target.result\r\n\t\t\tupgradeCallback?.(db)\r\n\t\t}\r\n\r\n\t\trequest.onsuccess = function (e) {\r\n\t\t\tresolve(request.result)\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction createObjectStore(storeName, storeIndexes = [], keyPath = 'id', autoIncrement = true, db) {\r\n\tconst store = db.createObjectStore(storeName, {\r\n\t\tkeyPath: keyPath,\r\n\t\tautoIncrement: autoIncrement,\r\n\t})\r\n\r\n\tstoreIndexes.forEach(storeIndex => {\r\n\t\tstore.createIndex(storeIndex[0], storeIndex[1], storeIndex[2])\r\n\t})\r\n}\r\n\r\nfunction clearObjectStore(storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'clear',\r\n\t\t\tresult: null,\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readwrite')\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\t\tconst clearRequest = store.clear()\r\n\r\n\t\tclearRequest.onerror = function (e) {\r\n\t\t\tresponse.error = e\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\tclearRequest.onsuccess = function (e) {\r\n\t\t\tresponse.result = { clearedStore: storeName }\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tdb.close()\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction getEntryByKey(keyValue, storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'get',\r\n\t\t\tresult: null,\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readonly')\r\n\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\t\tconst getRequest = store.get(keyValue)\r\n\r\n\t\tgetRequest.onerror = function (e) {\r\n\t\t\tresponse.error = e\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\tgetRequest.onsuccess = function (e) {\r\n\t\t\tresponse.result = getRequest.result\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tdb.close()\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction getEntryByIndex(indexName, indexValue, all, storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'get',\r\n\t\t\tresult: null,\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readonly')\r\n\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\t\tconst searchIndex = store.index(indexName)\r\n\t\tlet searchRequest\r\n\r\n\t\tif (all) {\r\n\t\t\tsearchRequest = searchIndex.getAll(indexValue)\r\n\t\t} else {\r\n\t\t\tsearchRequest = searchIndex.get(indexValue)\r\n\t\t}\r\n\r\n\t\tsearchRequest.onerror = function (e) {\r\n\t\t\tresponse.error = e\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\tsearchRequest.onsuccess = function (e) {\r\n\t\t\tresponse.result = searchRequest.result\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tdb.close()\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction getAllEntries(storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'get',\r\n\t\t\tresult: null,\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readonly')\r\n\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\t\tconst getRequest = store.getAll()\r\n\r\n\t\tgetRequest.onerror = function (e) {\r\n\t\t\tresponse.error = e\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\tgetRequest.onsuccess = function (e) {\r\n\t\t\tresponse.result = getRequest.result\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tdb.close()\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction putEntries(storeEntries = [], storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'put',\r\n\t\t\tresult: [],\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readwrite')\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\r\n\t\tstoreEntries.forEach(storeEntry => {\r\n\t\t\tconst putRequest = store.put(storeEntry)\r\n\r\n\t\t\tputRequest.onsuccess = function (e) {\r\n\t\t\t\tstoreEntry.key = putRequest.result\r\n\t\t\t\tresponse.result.push(storeEntry)\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttransaction.onerror = function (e) {\r\n\t\t\tresponse.result = null\r\n\t\t\tresponse.error = e\r\n\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tdb.close()\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction updateEntry(keyValue, indexName, indexValue, storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'update',\r\n\t\t\tresult: null,\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readwrite')\r\n\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\t\tconst updateRequest = store.get(keyValue)\r\n\r\n\t\tupdateRequest.onerror = function (e) {\r\n\t\t\tresponse.error = e\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\tupdateRequest.onsuccess = function (e) {\r\n\t\t\tupdateRequest.result[indexName] = indexValue\r\n\t\t\tstore.put(updateRequest.result)\r\n\r\n\t\t\tresponse.result = updateRequest.result\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tdb.close()\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction deleteEntry(keyValue, storeName, db) {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tconst response = {\r\n\t\t\tqueryType: 'delete',\r\n\t\t\tresult: null,\r\n\t\t\terror: null,\r\n\t\t\tok: false,\r\n\t\t}\r\n\r\n\t\tconst transaction = db.transaction(storeName, 'readwrite')\r\n\r\n\t\tconst store = transaction.objectStore(storeName)\r\n\t\tconst deleteRequest = store.delete(keyValue)\r\n\r\n\t\ttransaction.onerror = function (e) {\r\n\t\t\tresponse.error = e\r\n\t\t\treject(response)\r\n\t\t}\r\n\r\n\t\tdeleteRequest.onsuccess = function (e) {\r\n\t\t\tresponse.result = keyValue\r\n\t\t\tresponse.ok = true\r\n\r\n\t\t\tresolve(response)\r\n\t\t}\r\n\r\n\t\ttransaction.oncomplete = function (e) {\r\n\t\t\tdb.close()\r\n\t\t}\r\n\t})\r\n}\n\n//# sourceURL=webpack://gulp-template/./src/js/libs/indexedDB/indexedDB.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/index.js");
/******/ 	
/******/ })()
;